{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Sample Prediction Model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Set Variables\n",
    "***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load Data Variables\n",
    "explanatory_variable = [\"sex\", \"age\", \"odds\"]\n",
    "\n",
    "# Grid Search Variables\n",
    "score = \"recall\" # recall / precision\n",
    "params = {\"kernel\":[\"rbf\"], \"C\":[1, 10, 100]}\n",
    "\n",
    "# Model Name\n",
    "# モデル名（Pmodel.title）\n",
    "model_title = \"sample\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Create Model\n",
    "***\n",
    "#### Load Analysis Data\n",
    "Load data from result table, then add calculated variables."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "from umap.uhelper import pd_result\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "def load_analysis_data(training, exp):\n",
    "    # Load explanatory variables\n",
    "    df = pd_result(exp, training)\n",
    "    \n",
    "    # convert sex val to dummy vals\n",
    "    dmy_sex = pd.get_dummies(df.sex)\n",
    "    df = pd.concat([df, dmy_sex], axis=1)\n",
    "    df = df.drop(\"sex\", axis=1)\n",
    "    df = df.rename(columns={\"セ\": \"gelding\", \"牝\": \"female\", \"牡\": \"male\"})\n",
    "    \n",
    "    # Create and concat objection variables (<3 is False, 3< is True)\n",
    "    if training:\n",
    "        results = pd_result([\"rank\"], training)\n",
    "        results[\"target\"] = np.where(results[\"rank\"]<=3, False, True)\n",
    "        results = results.drop(\"rank\", axis=1)        \n",
    "        df = pd.concat([results, df], axis=1, sort=True)\n",
    "    \n",
    "    # Remove missing data\n",
    "    df = df.dropna()   \n",
    "    return df\n",
    "\n",
    "# Load entry data (Past data)\n",
    "df = load_analysis_data(True, explanatory_variable)\n",
    "#df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Train Prediction Model\n",
    "Split data and training"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "# Split dataframe to training data and test data\n",
    "X = df.drop([\"target\"], axis=1)\n",
    "y = df.target\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 3 candidates, totalling 15 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Using backend SequentialBackend with 1 concurrent workers.\n"
     ]
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from mlxtend.plotting import plot_confusion_matrix\n",
    "from sklearn.metrics import confusion_matrix, classification_report\n",
    "from sklearn.svm import SVC\n",
    "%matplotlib inline\n",
    "\n",
    "svc = SVC(gamma=\"scale\", class_weight=\"balanced\")\n",
    "clf = GridSearchCV(svc, params, cv=5, scoring=score, n_jobs=-1, verbose=10)\n",
    "clf.fit(X_train, y_train)\n",
    "\n",
    "print(\"\\n+ Best Parameter:\\n\")\n",
    "print(clf.best_estimator_)\n",
    "\n",
    "print(\"\\n+ Classification Report:\\n\")\n",
    "y_test, y_pred = y_test, clf.predict(X_test)\n",
    "print(classification_report(y_test, y_pred))\n",
    "\n",
    "print(\"\\n+ Confusion Matrix:\\n\")\n",
    "cnf_matrix = confusion_matrix(y_test, y_pred)\n",
    "fig, ax = plot_confusion_matrix(cnf_matrix)\n",
    "plt.style.use('seaborn-dark')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "\n",
    "tp, fn, fp, tn = confusion_matrix(y_test, y_pred).ravel()\n",
    "\n",
    "p = Pmodel()\n",
    "p.title = model_title\n",
    "p.model_bin = clf\n",
    "p.method = \"SVC\"\n",
    "p.columns = ','.join(explanatory_variable)\n",
    "p.recall = round(tp / (tp + fn), 3)\n",
    "p.precision = round(tp / (tp + fp), 3)\n",
    "p.note = clf.best_estimator_\n",
    "p.save()\n",
    "\n",
    "Pmodel.objects.filter(title=p.title).values(\"title\", \"method\", \"recall\", \"precision\", \"note\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Apply Model\n",
    "***\n",
    "#### Load Analysis Data\n",
    "Load data from result table, then add calculated variables."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from umap.uhelper import pd_result\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "def load_analysis_data(training, exp):\n",
    "    # Load explanatory variables\n",
    "    df = pd_result(exp, training)\n",
    "    \n",
    "    # convert sex val to dummy vals\n",
    "    dmy_sex = pd.get_dummies(df.sex)\n",
    "    df = pd.concat([df, dmy_sex], axis=1)\n",
    "    df = df.drop(\"sex\", axis=1)\n",
    "    df = df.rename(columns={\"セ\": \"gelding\", \"牝\": \"female\", \"牡\": \"male\"})\n",
    "    \n",
    "    # Create and concat objection variables (<3 is False, 3< is True)\n",
    "    if training:\n",
    "        results = pd_result([\"rank\"], training)\n",
    "        results[\"target\"] = np.where(results[\"rank\"]<=3, False, True)\n",
    "        results = results.drop(\"rank\", axis=1)        \n",
    "        df = pd.concat([results, df], axis=1, sort=True)\n",
    "    \n",
    "    # Remove missing data\n",
    "    df = df.dropna()   \n",
    "    return df\n",
    "\n",
    "# Load entry data (Past data)\n",
    "entry = load_analysis_data(False, explanatory_variable)\n",
    "#df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Concat Entry data and Result Data\n",
    "# NOTE: 'Id like to get prediction result of PAST and FUTURE races , so I'll do below command.\n",
    "df = pd.concat([df, entry], axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Apply Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load model\n",
    "p = Pmodel.objects.get(pk=u_model_title)\n",
    "clf = p.model_bin\n",
    "\n",
    "# Apply model\n",
    "y = clf.predict(df)\n",
    "exp = pd.Series(y, index=df.index, name='expect')\n",
    "\n",
    "# Concat toggled prediction result to dataframe\n",
    "df = pd.concat([df, ~exp], axis=1)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Delete & Insert Predction Resules"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "from django.db import transaction\n",
    "\n",
    "@transaction.atomic\n",
    "def insert_prediction(_df):\n",
    "    for index, row in df.iterrows():\n",
    "        exp = Expect()\n",
    "        exp.result = index\n",
    "        exp.pm_name = model_title\n",
    "        exp.clf_result = row.expect\n",
    "        exp.save()\n",
    "\n",
    "# Delete existing\n",
    "Expect.objects.filter(pm_name=model_title).delete()\n",
    "# Insert Prediction Results\n",
    "insert_prediction(df)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Django Shell-Plus",
   "language": "python",
   "name": "django_extensions"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
